service: CyberneticTask

provider:
  name: aws
  runtime: nodejs20.x
  region: "us-west-2"
  environment:
    DYNAMODB_TABLE: !Ref UsersTable
    SNS_TOPIC_ARN:  !Ref UserValidationTopic 

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-scripts
  - serverless-plugin-lambda-insights
  - serverless-associate-waf

functions:
  GetLoginFormHandler:
    handler: handler.GetLoginFormHandler
    events:
      - http:
          path: /login
          method: get
          cors: true
  UserLoginHandler:
    lambdaInsights: true
    handler: handler.UserLoginHandler
    events:
      - http:
          path: /login
          method: post
    iamRoleStatementsName: UserLoginHandler-lambda-role
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - 'sns:Publish'
        Resource:
          - !Ref UserValidationTopic
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          - 'dynamodb:Query'
          - "dynamodb:BatchGetItem"
          - "dynamodb:Scan"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:UpdateItem"
        Resource:
          - Fn::GetAtt: [UsersTable, Arn] 
  2faAuth:
    lambdaInsights: true
    handler: handler.processUserValidation
    events:
      - sns:
          arn: !Ref UserValidationTopic 
          topicName: UserValidationTopic
      - http:
          path: /login/2fa
          method: post
    iamRoleStatementsName: 2faauth-lambda-role
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - 'lambda:invokeFunction'  
        Resource: "*"
      - Effect: Allow
        Action:
          - "ses:SendEmail"
        Resource: "*"
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          - 'dynamodb:Query'
          - "dynamodb:BatchGetItem"
          - "dynamodb:Scan"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:UpdateItem"
        Resource:
          - Fn::GetAtt: [UsersTable, Arn] 

resources:
  Resources:
    # SNS topic 
    UserValidationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: UserValidationTopic 
    # DynamoDB
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: useremail
            AttributeType: S
        KeySchema:
          - AttributeName: useremail
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # WAF
    WAFRegionalWebACL:
      Type: "AWS::WAFv2::WebACL"  
      Properties:
        Name: ApiGateway-WAF
        Scope: REGIONAL
        Description: API Gateway ACL to Prevent HTTP Flood Attack
        DefaultAction:
          Allow: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: ApiGateway-WAF-HTTP
        Rules:
          - Name: ApiGateway-WAF-HTTP-Flood-Prevent-Rule
            Priority: 0
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: ApiGateway-WAF-HTTP-Flood-Prevent-Rule-Metric
            Statement:
              RateBasedStatement:
                AggregateKeyType: IP
                Limit: 2000

custom:
  betterCredentials:
    enabled: true
  scripts:
    hooks:
      'package:initialize':   echo "It will be using default profile ${AWS_PROFILE} to set profile run export AWS_PROFILE=profilename"
      'deploy:finalize': |
         aws dynamodb put-item --table-name UsersTable --item '{"useremail": {"S": "adil@gmail.com"}, "password": {"S": "admin"}}'
  associateWaf:
    name: ApiGateway-WAF
    version: V2


